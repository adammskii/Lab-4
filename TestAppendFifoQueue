package testqueue;

import static org.junit.jupiter.api.Assertions.*;

import java.util.Queue;

import queue_singlelinkedlist.FifoQueue;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class TestAppendFifoQueue {
	private FifoQueue<Integer> myQueue1;
	private FifoQueue<Integer> myQueue2;
	
	@BeforeEach
	void setUp() {
		myQueue1 = new FifoQueue<Integer>();
		myQueue2 = new FifoQueue<Integer>();
	}

	@AfterEach
	void tearDown(){
		myQueue1 = null;
		myQueue2 = null;
	}
	
	@Test
	void test2Empty() {
		myQueue1.append(myQueue2);
		assertEquals(0, myQueue1.size(), "Fel");
		assertEquals(0, myQueue2.size(), "Fel");
	}
	
	@Test
	void testAppendEmpty() {
		myQueue1.offer(1);
		myQueue1.append(myQueue2);
		assertEquals(myQueue1.poll(), 1, "fel");
		assertEquals(0, myQueue2.size(), "Fel");
	}
	@Test
	void testAppendToEmpty() {
		//Ger 2 en 2:a
		myQueue2.offer(2);
		myQueue1.append(myQueue2);
		//Om 1 innhåller det som två hade och två är tom stämmer det
		assertEquals(myQueue1.poll(),2, "fel");
		assertEquals(myQueue2.size(),0, "fel");
		
	}
	@Test
	void testTwoNoneEmpty() {
		myQueue1.offer(1);
		myQueue1.offer(2);
		myQueue2.offer(3);
		myQueue2.offer(4);
		
		myQueue1.append(myQueue2);
		//Testar att de är i ordning
		assertEquals(myQueue1.poll(),1,"fel");
		assertEquals(myQueue1.poll(),2, "fel");
		assertEquals(myQueue1.poll(),3, "fel");
		assertEquals(myQueue1.poll(),4, "fel");
		//Testar att 2 är tom
		assertTrue(myQueue2.isEmpty(), "Fel");
	}
	//"Cannot append a queue to itself"
	@Test
	void testSelf() {
		myQueue1.offer(1);
		myQueue1.append(myQueue1);
		Throwable exception = org.junit.jupiter.api.Assertions.assertThrows(IllegalArgumentException.class, () -> {
            myQueue1.append(myQueue1);
        });
		assertEquals("Cannot append a queue to itself", exception.getMessage(), "Fel");
	}
}
