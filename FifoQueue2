package queue_singlelinkedlist;

import java.util.*;

public class FifoQueue<E> extends AbstractQueue<E> implements Queue<E> {
	private QueueNode<E> last;
	private int size;

	public FifoQueue() {
		super();
		last = null;
		size = 0;
	}

	/**
	 * Inserts the specified element into this queue, if possible post: The
	 * specified element is added to the rear of this queue
	 * 
	 * @param e the element to insert
	 * @return true if it was possible to add the element to this queue, else false
	 */
	public boolean offer(E e) {
		QueueNode<E> newNode = new QueueNode<>(e);
		int temp = size;
		// Is empty är en metod från abstractQueue som kollar om min fifo queue
		// innehåller ngt
		if (isEmpty()) {
			// Om listan är tom så går det inte att peka från en annan nod så då sätter vi
			// next i noden till sig själv.
			// Förklaring: Om vi tex har nod1 och nod2 och vi vill peka på nod2 från nod1
			// skriver man nod1.next = nod2. Det man gör då är att man kallar på next i nod1
			// genom nod1.next. Next är satt till null.
			// När man gör det assignar vi nod1.next, nod2.

			// pekar på sig själv
			newNode.next = newNode;
			size++;
		} else {
			//
			newNode.next = last.next;
			last.next = newNode;

			size++;
		}
		last = newNode;

		if (size == temp) {
			return false;
		} else {
			return true;
		}

	}

	/**
	 * Returns the number of elements in this queue
	 * 
	 * @return the number of elements in this queue
	 */
	public int size() {
		return size;
	}

	/**
	 * Retrieves, but does not remove, the head of this queue, returning null if
	 * this queue is empty
	 * 
	 * @return the head element of this queue, or null if this queue is empty
	 */
	public E peek() {
		if (isEmpty()) {
			return null;
		} else {
			return last.next.element;
		}

	}

	/**
	 * Retrieves and removes the head of this queue, or null if this queue is empty.
	 * post: the head of the queue is removed if it was not empty
	 * 
	 * @return the head of this queue, or null if the queue is empty
	 */
	public E poll() {
		if (isEmpty()) {
			return null;
		} else {
			E headOfSnek = last.next.element;
			if(size == 1) {
				last = null;
			} else {
				last.next = last.next.next;
			}
			size--;
			return headOfSnek;
		}

	}

	/**
	 * Returns an iterator over the elements in this queue
	 * 
	 * @return an iterator over the elements in this queue
	 */
	public Iterator<E> iterator() {
		return new QueueIterator();
	}
	private class QueueIterator implements Iterator<E>{
		private QueueNode<E> pos;
		
		
		private QueueIterator() {
			if(last != null) {
				//Börjar på huvudet
				pos = last.next;
			} else {
				pos = null;
			}
			
		
		}
		
		@Override
		public boolean hasNext() {
			// TODO Auto-generated method stub
			return pos != null;
		}

		@Override
		public E next() {
			if(!hasNext()) {
				throw new NoSuchElementException("No more elements in queue");
			}
			   E element = pos.element;
			   //Om pos är på sista
			   if(pos == last) {
				   pos = null;
			   }else {
				   pos = pos.next;
			   }
		
		        return element;
			
//				QueueNode<E> ne = pos.next;
//			
//			// TODO Auto-generated method stub
//			return ne.element;
		}
		
	}

	private static class QueueNode<E> {
		E element;
		QueueNode<E> next;

		private QueueNode(E x) {
			element = x;
			next = null;
		}
	}

}
